apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-setup
  namespace: student-j-donnerbauer
data:
  create.sql: |
    ALTER USER 'connect'@'%' IDENTIFIED WITH mysql_native_password BY 'password';
    GRANT ALL PRIVILEGES ON *.* TO 'connect'@'%';
    FLUSH PRIVILEGES;
    CREATE DATABASE connect;
  wait.sh: |
    until echo '\q' | mysql -hmysql -P"$PORT" -u"$USER" -p"$PASSWORD" $DATABASE; do
        echo "waiting for godot ..."
        sleep 2
    done
---
apiVersion: v1
kind: Secret
metadata:
  name: mysql-admin
  namespace: student-j-donnerbauer
type: kubernetes.io/basic-auth
stringData:
  username: connect
  password: password
  database: connect
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: database
  namespace: student-j-donnerbauer
spec:
  accessModes:
    - ReadWriteMany
  storageClassName: standard
  resources:
    requests:
      storage: 50Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: quarkus
  namespace: student-j-donnerbauer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: quarkus
  template:
    metadata:
      labels:
        app: quarkus
    spec:
      containers:
        - name: quarkus
          image: registry.cloud.htl-leonding.ac.at/j.donnerbauer/quarkus:latest
          ports:
            - containerPort: 8080
          imagePullPolicy: Always
      initContainers:
        - name: wait
          image: mysql:8
          command: ["sh", "-c", "/usr/local/bin/wait.sh"]
          volumeMounts:
            - name: init-script
              mountPath: /usr/local/bin
              readOnly: true
          env:
            - name: USER
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: username
            - name: DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: database
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: password
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: database
        - name: init-script
          configMap:
            name: mysql-setup
            items:
              - key: wait.sh
                path: wait.sh
            defaultMode: 0744
      imagePullSecrets:
        - name: leocloudcredentials
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: student-j-donnerbauer
spec:
  replicas: 1
  selector:
    matchLabels:
      component: mysql
  template:
    metadata:
      labels:
        component: mysql
    spec:
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: database
        - name: init-script
          configMap:
            name: mysql-setup
            items:
              - key: create.sql
                path: create.sql
      containers:
        - name: mysql
          image: mysql:8
          resources:
            requests:
              memory: "500Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "400m"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-storage
              mountPath: /var/lib/mysql
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
              readOnly: true
          env:
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: username
            - name: MYSQL_DB
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: database
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: password
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-admin
                  key: password
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: student-j-donnerbauer
spec:
  ports:
    - port: 3306
      targetPort: 3306
      protocol: TCP
      name: mysql
  selector:
    component: mysql
---
apiVersion: v1
kind: Service
metadata:
  name: quarkus
  namespace: student-j-donnerbauer
spec:
  ports:
    - port: 80
      targetPort: 8080
      protocol: TCP
      name: http
  selector:
    app: quarkus
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: quarkus-ingress
  namespace: student-j-donnerbauer
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  rules:
    - host: student.cloud.htl-leonding.ac.at
      http:
        paths:
          - path: /j.donnerbauer(/|$)(.*)$
            pathType: Prefix
            backend:
              service:
                name: quarkus
                port:
                  number: 80
