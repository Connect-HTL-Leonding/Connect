# This workflow will build a Java project with Maven
# For more information see: https://aberger.at/blog/2021/05/29/cloud-startproject.html

name: build and deploy (develop)

on:
  push:
    branches: [ dev ]

  workflow_dispatch:
    inputs:
      debug:
        description: enable tmate console debugging     
        required: false
        default: "disabled"

env:
  REGISTRY: ghcr.io
  DISTRIBUTION_FOLDER: target/distribution/docker

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '15'

    - uses: actions/checkout@v2

    - name: cache maven repository
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2
        key: ${{ runner.os }}-build-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-m2-

    - name: build quarkus application
      run: |
        pwd
        mvn -Dmaven.test.skip=true -Dquarkus.package.type=uber-jar -Dquarkus-profile=prod -Dbase.href="/" -B package
      working-directory: server
      
    - name: convert github repository name to lowercase
      run: echo "IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: build appsrv docker image
      run: |
        docker build --file docker/Dockerfile.jvm server --tag ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}-server
#      working-directory: server      
#
#    - name: Log in to the Container registry
#      uses: docker/login-action@v1
#      with:
#        registry: ${{ env.REGISTRY }}
#        username: ${{ github.actor }}
#        password: ${{ secrets.REGISTRY_ACCESS_TOKEN }}
#
#    - name: push appsrv docker image
#      run: |
#        docker push ${{ env.REGISTRY }}/${{ github.repository }}-appsrv
#      working-directory: distribution/${{ env.DISTRIBUTION_FOLDER }}        
#    - name: push nginx docker image
#      run: |
#        docker push ${{ env.REGISTRY }}/${{ github.repository }}-nginx
#      working-directory: distribution/${{ env.DISTRIBUTION_FOLDER }}        
#
#    - name: install ssh key
#      uses: caberger/install-ssh-key@v1.0
#      with:
#        ssh-private-key:  ${{ secrets.SSH_SERVER_PRIVATE_KEY }}
#        user: ${{ secrets.SERVER_USER }}
#        server: ${{ secrets.SERVER }}
#        alias: server
#
#    - name: convert github repository name to lowercase
#      run: echo "IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
#
#    - name: enable ssh login for debugging...
#      uses: mxschmitt/action-tmate@v3
#      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug == 'enabled' }}        
#
#    - name: deploy to server  
#      working-directory: distribution
#      run: |
#        ssh server "rm -rf ~/dist && mkdir -p ~/dist"
#        scp -r *.sh server/ server:~/dist/
#        scp docker-compose-production.yml server:~/dist
#        ssh server "chmod +x ~/dist/*.sh"
#        echo "running installation on server..."
#        ssh server "cd ~/dist && sudo ./install.sh ${{ github.actor }} ${{ secrets.REGISTRY_ACCESS_TOKEN }} ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }} ${{ secrets.SERVER_USER }}"
#        echo "done $(date)"

  bye:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - run: echo "done"
