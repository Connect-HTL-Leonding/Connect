# This workflow will build a Java project with Maven
# For more information see: https://aberger.at/blog/2021/05/29/cloud-startproject.html
#test

name: build and deploy (develop)

on:
  push:
    branches: [ dev ]

  workflow_dispatch:
    inputs:
      debug:
        description: enable tmate console debugging     
        required: false
        default: "disabled"

env:
  REGISTRY: ghcr.io
  DISTRIBUTION_FOLDER: target/distribution/docker

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '15'

    - uses: actions/checkout@v2

    - name: cache maven repository
      uses: actions/cache@v2
      with:
        path: |
          ~/.m2
        key: ${{ runner.os }}-build-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-build-m2-
          
    - name: cache node_modules (application/application)
      uses: actions/cache@v2
      with:
        path: './application/application/node_modules'
        key: ${{ runner.os }}-www-node-modules-v0.0.2-${{ hashFiles('./application/application/package.json') }}
        
    - name: install nodejs
      uses: actions/setup-node@v2
      with:
        node-version: '14'
        
    - name: install node dependencies
      run: |
        npm install -g @ionic/cli
        npm install
      working-directory: application/application
          
    - name: build ionic application
      run: |
        ionic build
      working-directory: application/application
      
    - name: deploy to docker folder
      run: |
        chmod +x copy-www.sh
        ./copy-www.sh
      working-directory: docker

    - name: build quarkus application
      run: |
        pwd
        mvn -Dmaven.test.skip=true -Dquarkus.package.type=uber-jar -Dquarkus-profile=prod -Dbase.href="/" -B package
      working-directory: server
      
    - name: convert github repository name to lowercase
      run: echo "IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    - name: build quarkus docker image
      run: |
        docker build --file docker/Dockerfile.jvm . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}-server
      working-directory: server     
      
    - name: build keycloak docker image
      run: |
        pwd
        docker build . --tag ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}-keycloak
      working-directory: docker

    - name: Log in to the Container registry
      uses: docker/login-action@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.REGISTRY_ACCESS_TOKEN }}

    - name: push quarkus docker image
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}-server
      working-directory: server   
      
    - name: push keycloak docker image
      run: |
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }}-keycloak
      working-directory: docker
      
      
#    - name: push nginx docker image
#      run: |
#        docker push ${{ env.REGISTRY }}/${{ github.repository }}-nginx
#      working-directory: distribution/${{ env.DISTRIBUTION_FOLDER }}        
#
    - name: install ssh key
      uses: caberger/install-ssh-key@v1.0
      with:
        ssh-private-key:  ${{ secrets.SSH_SERVER_PRIVATE_KEY }}
        user: ${{ secrets.SERVER_USER }}
        server: ${{ secrets.SERVER }}
        alias: server

    - name: enable ssh login for debugging...
      uses: mxschmitt/action-tmate@v3
      if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.debug == 'enabled' }}        

    - name: deploy to server  
      working-directory: docker
      run: |
        ssh server "rm -rf ~/dist && mkdir -p ~/dist"
        scp -r *.sh server/ server:~/dist/
        scp docker-compose-production.yml server:~/dist
        scp Dockerfile server:~/dist
        scp -r realm/ server:~/dist
        ssh server "chmod +x ~/dist/*.sh"
        echo "running installation on server..."
        ssh server "cd ~/dist && sudo ./install.sh ${{ github.actor }} ${{ secrets.REGISTRY_ACCESS_TOKEN }} ${{ env.REGISTRY }}/${{ env.IMAGE_REPOSITORY }} ${{ secrets.SERVER_USER }}"
        echo "done $(date)"

  bye:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - run: echo "done"
